--SQL ANALYSIS
CREATE TABLE DIM_PLAYERS(
NAME 				VARCHAR(100),
TEAM				VARCHAR(20),
BATTINGSTYLE        VARCHAR(50),
BOWLINGSTYLE        VARCHAR(50),
PLAYINGROLE         VARCHAR(50)
);
CREATE TABLE DIM_MATCH_SUMMARY(
TEAM1 				VARCHAR(20),
TEAM2				VARCHAR(20),
WINNER		        VARCHAR(20),
MARGIN		        VARCHAR(50),
MATCHDATE           DATE(50),
MATCH_ID			VARCHAR(20)
);
CREATE TABLE FACT_BATTING_SUMMARY(
MATCH_ID			VARCHAR(20),
MATCH_NAME			VARCHAR(50),
TEAMINNINGS		    VARCHAR(20),
BATTINGPOS		    NUMERIC,
BATSMANNAME 		VARCHAR(100),
OUT_NOTOUT 			VARCHAR(10),
RUNS           		NUMERIC,
BALLS           	NUMERIC,
FOURS           	NUMERIC,
SIXES           	NUMERIC,
STRIKE_RATE         VARCHAR(10)
);
CREATE TABLE FACT_BOWLING_SUMMARY(
MATCH_ID			VARCHAR(20),
MATCH_NAME			VARCHAR(50),
BOWLINGTEAM		    VARCHAR(20),
BOWLERNAME	 		VARCHAR(100),
OVERS	 			NUMERIC,
MAIDEN         		NUMERIC,
RUNS         		NUMERIC,
WICKETS           	NUMERIC,
ECONOMY           	NUMERIC,
ZEROS           	NUMERIC,
FOURS         		NUMERIC,
SIXES         		NUMERIC,
WIDES         		NUMERIC,
NOBALLS         	NUMERIC
);


-----
--DIM_PLAYER TABLE

select * from DIM_PLAYERS;
select count(1) from DIM_PLAYERS;

--- DIM_MATCH_SUMMARY
SELECT * FROM DIM_MATCH_SUMMARY;
SELECT count(1) FROM DIM_MATCH_SUMMARY;

--- FACT_BOWLING_SUMMARY
SELECT * FROM FACT_BOWLING_SUMMARY;
SELECT count(1) FROM FACT_BOWLING_SUMMARY;

--- FACT_BATTING_SUMMARY
SELECT * FROM FACT_BATTING_SUMMARY;
SELECT count(1) FROM FACT_BATTING_SUMMARY;

--TO ADD YEAR COLUMN IN DIM_MATCH_SUMMARY
ALTER TABLE DIM_MATCH_SUMMARY ADD COLUMN MATCHYEAR NUMERIC;
UPDATE DIM_MATCH_SUMMARY SET MATCHYEAR=EXTRACT(YEAR FROM MATCHDATE);
COMMIT;


ALTER TABLE FACT_BOWLING_SUMMARY ADD COLUMN BALLS NUMERIC;
UPDATE FACT_BOWLING_SUMMARY SET BALLS= GET_BALLS_FROM_OVERS(OVERS);
COMMIT;



--Primary Insights
--1. Top 10 batsmen based on past 3 years total runs scored.
	  SELECT BATSMANNAME,SUM(RUNS) AS "TOTAL_RUNS" FROM FACT_BATTING_SUMMARY GROUP BY BATSMANNAME ORDER BY 2 DESC LIMIT 10;


--2. Top 10 batsmen based on past 3 years batting average. (min 60 balls faced in each season)
	--Batsman who has played at least 60 balls in each season
	  SELECT * FROM get_batsmen_with_sufficient_balls();
	  
	  SELECT BATSMANNAME,ROUND(SUM(RUNS)/get_batsman_out_count(BATSMANNAME),2) AS AVG_RUNS_SCORED
	  FROM FACT_BATTING_SUMMARY 
	  WHERE BATSMANNAME IN (select * from get_batsmen_with_sufficient_balls())
	  GROUP BY BATSMANNAME
	  ORDER BY 2 DESC
	  LIMIT 10;	  
	--To get Yearly Top 10 Batsman
	  SELECT * FROM get_top_batsmen_for_year(2021);



--3. Top 10 batsmen based on past 3 years strike rate (min 60 balls faced in each season)
--	to get year

	--Batsman who has played at least 60 balls in each season
	  SELECT * FROM get_batsmen_with_sufficient_balls();
	  
	  SELECT BATSMANNAME,100*SUM(RUNS)/SUM(BALLS) AS STRIKE_RATE
	  FROM FACT_BATTING_SUMMARY 
	  WHERE BATSMANNAME IN (select * from get_batsmen_with_sufficient_balls())
	  GROUP BY BATSMANNAME
	  ORDER BY STRIKE_RATE DESC
	  LIMIT 10;
	  

--4. Top 10 bowlers based on past 3 years total wickets taken.
	SELECT  BOWLERNAME,SUM(WICKETS) AS "TOTAL_WICKETS" FROM FACT_BOWLING_SUMMARY GROUP BY BOWLERNAME ORDER BY 2 DESC LIMIT 10;

--5. Top 10 bowlers based on past 3 years bowling average. (min 60 balls bowled in each season)
	--Bowler who has bowled at least 60 balls in each season
	SELECT * FROM get_balls_from_overs(3.1)
	
	SELECT BOWLERNAME,ROUND(SUM(RUNS)/SUM(WICKETS),2) AS BOWLING_AVG
	FROM FACT_BOWLING_SUMMARY 
	WHERE BOWLERNAME IN (select * from get_bowler_with_sufficient_balls())
	GROUP BY BOWLERNAME
	ORDER BY BOWLING_AVG ;
	
--6. Top 10 bowlers based on past 3 years economy rate. (min 60 balls bowled in each season)

	SELECT BOWLERNAME,ROUND(6*SUM(RUNS)/SUM(BALLS),2) AS ECONOMY_RATE
	FROM FACT_BOWLING_SUMMARY 
	WHERE BOWLERNAME IN (SELECT BOWLERNAME FROM get_bowler_with_sufficient_balls())
	GROUP BY BOWLERNAME
	ORDER BY ECONOMY_RATE
	LIMIT 10;



--7. Top 5 batsmen based on past 3 years boundary % (fours and sixes).

	--It is calculated by dividing the total number of runs scored through boundaries by the overall runs scored and then multiplying the result by 100 to obtain a percentage.

		SELECT BATSMANNAME,
		ROUND((SUM(FOURS)*4+SUM(SIXES)*6)*100/SUM(RUNS),2) AS BOUNDARY_PERCENTAGE
		FROM FACT_BATTING_SUMMARY B
		INNER JOIN DIM_PLAYERS P
		ON B.BATSMANNAME=P.NAME
		WHERE PLAYINGROLE!='Bowler'
		GROUP BY BATSMANNAME
		HAVING SUM(RUNS)!=0
		ORDER BY BOUNDARY_PERCENTAGE DESC
		LIMIT 10;

	--MIN 60 BALLS PLAYED IN EACH season

		SELECT BATSMANNAME,
		ROUND((SUM(FOURS)*4+SUM(SIXES)*6)*100/SUM(RUNS),2) AS BOUNDARY_PERCENTAGE
		FROM FACT_BATTING_SUMMARY B
		INNER JOIN DIM_PLAYERS P
		ON B.BATSMANNAME=P.NAME
		WHERE PLAYINGROLE!='Bowler'
		AND BATSMANNAME IN (select * from get_batsmen_with_sufficient_balls())
		GROUP BY BATSMANNAME
		HAVING SUM(RUNS)!=0
		ORDER BY BOUNDARY_PERCENTAGE DESC
		LIMIT 10;

--8. Top 5 bowlers based on past 3 years dot ball %.

		SELECT BOWLERNAME,ROUND(100*SUM(ZEROS)/SUM(BALLS),2) AS DOT_BALL_PERCENTAGE
		FROM FACT_BOWLING_SUMMARY
		GROUP BY BOWLERNAME
		ORDER BY DOT_BALL_PERCENTAGE DESC
		LIMIT 10;
		
		--Bowler who has bowled at least 60 balls in each season
		SELECT BOWLERNAME,ROUND(100*SUM(ZEROS)/SUM(BALLS),2) AS DOT_BALL_PERCENTAGE
		FROM FACT_BOWLING_SUMMARY
		WHERE BOWLERNAME IN (select * from get_bowler_with_sufficient_balls())
		GROUP BY BOWLERNAME
		ORDER BY DOT_BALL_PERCENTAGE DESC
		LIMIT 10;
		
		

--9. Top 4 teams based on past 3 years winning %.

		WITH TEAM2 AS (
		SELECT TEAM2,COUNT(1) AS T2_COUNT FROM DIM_MATCH_SUMMARY GROUP BY TEAM2),
		TEAM1 AS (
		SELECT TEAM1,COUNT(1) AS T1_COUNT FROM DIM_MATCH_SUMMARY GROUP BY TEAM1
		),
		WINNERS AS (
		SELECT WINNER,COUNT(1) AS MATCHES_WON FROM DIM_MATCH_SUMMARY GROUP BY WINNER
		)
		
		SELECT TEAM1 , T1_COUNT+T2_COUNT AS TOTAL_MATCHES,MATCHES_WON,
		MATCHES_WON*100/(T1_COUNT+T2_COUNT) AS WINNING_PERCENTAGE
		FROM TEAM1 T1
		INNER JOIN TEAM2 T2
		ON T1.TEAM1 = T2.TEAM2
		INNER JOIN WINNERS
		ON WINNER = T1.TEAM1
		ORDER BY WINNING_PERCENTAGE DESC
		LIMIT 4 ;

--10.Top 2 teams with the highest number of wins achieved by chasing targets over the past 3 years.
		
		--SELECT * FROM get_team_winning_percentage();
		SELECT TEAM, WON_WHILE_CHASING,MATCHES_WON,WINNING_PERCENTAGE,
		ROUND(100*WON_WHILE_CHASING/MATCHES_WON,2) AS WIN_PERCENTAGE_WHILE_CHASING
		FROM get_team_winning_percentage() W
		INNER JOIN 
		(SELECT WINNER ,COUNT(1) AS WON_WHILE_CHASING FROM DIM_MATCH_SUMMARY WHERE MARGIN LIKE '%wickets%' GROUP BY WINNER) M
		ON M.WINNER=W.TEAM
		ORDER BY WIN_PERCENTAGE_WHILE_CHASING DESC
		LIMIT 2;



